<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="9199e5d7-8179-4205-b0ae-236aab6c029c" name="Default Changelist" comment="made modifications to files">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/ftw/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/ftw/core.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="UPDATE_TYPE" value="MERGE" />
  </component>
  <component name="ProjectId" id="1ZgEUPIkYYNmjby5OiOj09s4Rgk" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
  </component>
  <component name="ReplState" timestamp="1587764874417">{:repl-history {:ide [], :local [{:command &quot;(doc map)&quot;, :offset 9, :ns &quot;ftw.core&quot;} {:command &quot;(ns ftw.core\n  (:require [clojure.data.csv :as csv]\n            [clojure.java.io :as io]))\n\n; reads in the csv file\n(with-open [reader (io/reader \&quot;mygolfdata.csv\&quot;)]\n  (doall\n    (csv/read-csv reader)))\n\n; converts csv file to traditional dictionary structure\n(defn csv-data-&gt;maps [csv-data]\n  (map zipmap\n       (-&gt;&gt; (first csv-data)\n            (map keyword) repeat)\n       (rest csv-data)))\n\n; stores golf-data as permanent variable\n(def temp-data (csv-data-&gt;maps (with-open [reader (io/reader \&quot;mygolfdata.csv\&quot;)]\n                                 (doall\n                                   (csv/read-csv reader)))))\n\n;;Converts values to doubles, except for playernames which remain strings!\n(defn vals-to-doubles [m]\n  (zipmap (keys m)\n          (map #(if (or (not %)\n                        (= % \&quot;NA\&quot;)\n                        (clojure.string/includes? % \&quot; \&quot;))\n                  (if (clojure.string/includes? % \&quot; \&quot;)\n                    %\n                    0.0)\n                  (read-string %))\n               (vals m))))\n\n(def golf-data (map vals-to-doubles (into [] temp-data)))\n\n;; 20111113 update: handles functions of different arities\n;; 20120829 update: packaged into the gp project\n;; 20131115 update: eliminated use of zippers\n\n;; This code defines and runs a genetic programming system on the problem\n;; of finding a function that fits a particular set of [x y] pairs.\n\n;; The aim here is mostly to demonstrate how genetic programming can be\n;; implemented in Clojure simply and clearly, and several things are\n;; done in somewhat inefficient and/or non-standard ways. But this should\n;; provide a reasonable starting point for developing more efficient/\n;; standard/capable systems.\n\n;; Note also that this code, as written, will not always find a solution.\n;; There are a variety of changes that one might make to improve its\n;; problem-solving performance on the given problem.\n\n;; We'll use data from x^2 + x + 1 (the problem from chapter 4 of\n;; http://www.gp-field-guide.org.uk/, although our gp algorithm won't\n;; be the same, and we'll use some different parameters as well).\n\n;; We'll use input (x) values ranging from -1.0 to 1.0 in increments\n;; of 0.1, and we'll generate the target [x y] pairs algorithmically.\n;; If you want to evolve a function to fit your own data then you could\n;; just paste a vector of pairs into the definition of target-data instead.\n\n\n;; Remove unneeded key-value pairs from data\n(map #(dissoc % :PlayerName :TwoPutts :ThreePutts :Index :Season :AvgOfficialWGR)\n     golf-data)\n\n; extracts values from golf data and then converts into a vector of vectors\n(defn myfunction [golf-data]\n  (map #(into [] %) (map #(vals %) golf-data)))\n\n;; Remove unneeded key-value pairs from data\n(myfunction (map #(dissoc % :PlayerName :TwoPutts :ThreePutts :Index :Season :AvgOfficialWGR)\n                 golf-data))\n\n; small function that swaps two elements in a vector\n(defn swap [v i1 i2]\n  (assoc v i2 (v i1) i1 (v i2)))\n\n; generalizes swap function to map\n(defn swap-elements [v i1 i2]\n  (map #(swap % i1 i2) v))\n\n; final form of regression-data ready for analysis\n; swapping officialmoney and oneputts\n(def regression-data\n  (swap-elements (myfunction (map #(dissoc % :PlayerName :TwoPutts :ThreePutts :Index :Season :AvgOfficialWGR)\n                                  golf-data)) 5 9))\n\n(def target-data regression-data)\n\n;; An individual will be an expression made of functions +, -, *, and\n;; pd (protected division), along with terminals x and randomly chosen\n;; constants between -5.0 and 5.0. Note that for this problem the\n;; presence of the constants actually makes it much harder, but that\n;; may not be the case for other problems.\n\n;; We'll the functions and the arities in a map.\n\n(def function-table (zipmap '(+ - * pd)\n                            '(2 2 2 2 )))\n\n(defn random-function\n  []\n  (rand-nth (keys function-table)))\n\n(defn random-terminal\n  []\n  (rand-nth (list 'x1 'x2 'x3 'x4 'x5 'x6 'x7 'x8 (- (rand 1000) 500))))\n\n(defn random-code\n  [depth]\n  (if (or (zero? depth)\n          (zero? (rand-int 2))) ; might want to try (rand-int (count function-table))\n    (random-terminal)\n    (let [f (random-function)]\n      (cons f (repeatedly (get function-table f)\n                          #(random-code (dec depth)))))))\n\n;; And we have to define pd (protected division):\n\n(defn pd\n  \&quot;Protected division; returns 0 if the denominator is zero.\&quot;\n  [num denom]\n  (if (zero? denom)\n    0\n    (/ num denom)))\n\n;; We can now evaluate the error of an individual by creating a function\n;; built around the individual, calling it on all of the x values, and\n;; adding up all of the differences between the results and the\n;; corresponding y values.\n\n(defn error\n  [individual]\n  (let [value-function (eval (list 'fn '[x1 x2 x3 x4 x5 x6 x7 x8] individual))]\n    (reduce + (map (fn [[x1 x2 x3 x4 x5 x6 x7 x8 y]]\n                     (Math/abs\n                       (- (float (value-function x1 x2 x3 x4 x5 x6 x7 x8)) y)))\n                   target-data))))\n\n;; We can now generate and evaluate random small programs, as with:\n\n;; (let [i (random-code 6)] (println i) (println (error i) \&quot;from individual\&quot; i))\n\n;; To help write mutation and crossover functions we'll write a utility\n;; function that returns a random subtree from an expression and another that\n;; replaces a random subtree of an expression.\n\n(defn codesize [c]\n  (if (seq? c)\n    (count (flatten c))\n    1))\n\n(defn random-subtree\n  [i]\n  (if (zero? (rand-int (codesize i)))\n    i\n    (random-subtree\n      (rand-nth\n        (apply concat\n               (map #(repeat (codesize %) %)\n                    (rest i)))))))\n\n;(random-subtree '(+ (* x (+ y z)) w))\n\n(defn replace-random-subtree\n  [i replacement]\n  (if (zero? (rand-int (codesize i)))\n    replacement\n    (let [position-to-change\n          (rand-nth\n            (apply concat\n                   (map #(repeat (codesize %1) %2)\n                        (rest i)\n                        (iterate inc 1))))]\n      (map #(if %1 (replace-random-subtree %2 replacement) %2)\n           (for [n (iterate inc 0)] (= n position-to-change))\n           i))))\n\n;(replace-random-subtree '(0 (1) (2 2) (3 3 3) (4 4 4 4) (5 5 5 5 5) (6 6 6 6 6 6 6)) 'x)\n\n;(replace-random-subtree '(+ (* x (+ y z)) w) 3)\n\n(defn mutate\n  [i]\n  (replace-random-subtree i (random-code 2)))\n\n;(mutate '(+ (* x (+ y z)) w))\n\n(defn crossover\n  [i j]\n  (replace-random-subtree i (random-subtree j)))\n\n;(crossover '(+ (* x (+ y z)) w) '(/ a (/ (/ b c) d)))\n\n; We can see some mutations with:\n; (let [i (random-code 2)] (println (mutate i) \&quot;from individual\&quot; i))\n\n; and crossovers with:\n; (let [i (random-code 2) j (random-code 2)]\n;   (println (crossover i j) \&quot;from\&quot; i \&quot;and\&quot; j))\n\n;(let [e '(* x 2)\n;      m (mutate e)]\n; (println (error e) e)\n; (println (error m) m))\n;\n;(let [e1 '(* x 2)\n;      e2 '(+ (* x 3) 4)\n;      c (crossover e1 e2)]\n; (println (error e1) e1)\n; (println (error e2) e2)\n; (println (error c) c))\n\n;; We'll also want a way to sort a population by error that doesn't require\n;; lots of error re-computation:\n\n(defn sort-by-error\n  [population]\n  (vec (map second\n            (sort (fn [[err1 ind1] [err2 ind2]] (&lt; err1 err2))\n                  (map #(vector (error %) %) population)))))\n\n;; Finally, we'll define a function to select an individual from a sorted\n;; population using tournaments of a given size.\n(comment \&quot;\n(defn select\n  [population tournament-size]\n  (let [size (count population)]\n    (nth population\n         (apply min (repeatedly tournament-size #(rand-int size))))))\n         \&quot;)\n\n\n;; Finally, we'll define a function to select and individual from a\n;; sorted population using LEXICASE SELECTION\n(defn lexicase-selection\n  \&quot;Selects an individual from the population using lexicase selection.\&quot;\n  (loop [survivors pop\n         cases (shuffle (range (count (:errors (first pop)))))]\n    (if (or (empty? cases)\n            (empty? (rest survivors)))\n      (rand-nth survivors)\n      (let [min-err-for-case (apply min (map #(nth % (first cases))\n                                             (map :errors survivors)))]\n        (recur (filter #(= (nth (:errors %) (first cases)) min-err-for-case)\n                       survivors)\n               (rest cases))))))\n\n\n\n;; Now we can evolve a solution by starting with a random population and\n;; repeatedly sorting, checking for a solution, and producing a new\n;; population.\n\n(defn evolve\n  [popsize]\n  (println \&quot;Starting evolution...\&quot;)\n  (println \&quot;Testing, testing!\&quot;)\n  (loop [generation 0\n         population (sort-by-error (repeatedly popsize #(random-code 3)))]\n    (println population)\n    (let [best (first population)\n          best-error (error best)]\n      (println \&quot;======================\&quot;)\n      (println \&quot;Generation:\&quot; generation)\n      (println \&quot;Best program:\&quot; best)\n      (println \&quot;Best error:\&quot; best-error)\n\n      (println \&quot;     Median error:\&quot; (error (nth population\n                                                (int (/ popsize 2)))))\n      (println \&quot;     Average program size:\&quot;\n               (float (/ (reduce + (map count (map flatten population)))\n                         (count population))))\n      (if (&lt; best-error 0.1) ;; good enough to count as success\n        (println \&quot;Success:\&quot; best)\n        (recur\n          (inc generation)\n          (sort-by-error\n            (concat\n              (repeatedly (* 1/2 popsize) #(mutate (lexicase-selection population)))\n              (repeatedly (* 1/4 popsize) #(crossover (lexicase-selection population)\n                                                      (lexicase-selection population)))\n              (repeatedly (* 1/4 popsize) #(lexicase-selection population)))))))))\n\n\n;; Run it with a population of 1000:\n\n(evolve 1000)&quot;, :offset 9709, :ns &quot;ftw.core&quot;} {:command &quot;(ns ftw.core\n  (:require [clojure.data.csv :as csv]\n            [clojure.java.io :as io]))\n\n; reads in the csv file\n(with-open [reader (io/reader \&quot;mygolfdata.csv\&quot;)]\n  (doall\n    (csv/read-csv reader)))\n\n; converts csv file to traditional dictionary structure\n(defn csv-data-&gt;maps [csv-data]\n  (map zipmap\n       (-&gt;&gt; (first csv-data)\n            (map keyword) repeat)\n       (rest csv-data)))\n\n; stores golf-data as permanent variable\n(def temp-data (csv-data-&gt;maps (with-open [reader (io/reader \&quot;mygolfdata.csv\&quot;)]\n                                 (doall\n                                   (csv/read-csv reader)))))\n\n;;Converts values to doubles, except for playernames which remain strings!\n(defn vals-to-doubles [m]\n  (zipmap (keys m)\n          (map #(if (or (not %)\n                        (= % \&quot;NA\&quot;)\n                        (clojure.string/includes? % \&quot; \&quot;))\n                  (if (clojure.string/includes? % \&quot; \&quot;)\n                    %\n                    0.0)\n                  (read-string %))\n               (vals m))))\n\n(def golf-data (map vals-to-doubles (into [] temp-data)))\n\n;; 20111113 update: handles functions of different arities\n;; 20120829 update: packaged into the gp project\n;; 20131115 update: eliminated use of zippers\n\n;; This code defines and runs a genetic programming system on the problem\n;; of finding a function that fits a particular set of [x y] pairs.\n\n;; The aim here is mostly to demonstrate how genetic programming can be\n;; implemented in Clojure simply and clearly, and several things are\n;; done in somewhat inefficient and/or non-standard ways. But this should\n;; provide a reasonable starting point for developing more efficient/\n;; standard/capable systems.\n\n;; Note also that this code, as written, will not always find a solution.\n;; There are a variety of changes that one might make to improve its\n;; problem-solving performance on the given problem.\n\n;; We'll use data from x^2 + x + 1 (the problem from chapter 4 of\n;; http://www.gp-field-guide.org.uk/, although our gp algorithm won't\n;; be the same, and we'll use some different parameters as well).\n\n;; We'll use input (x) values ranging from -1.0 to 1.0 in increments\n;; of 0.1, and we'll generate the target [x y] pairs algorithmically.\n;; If you want to evolve a function to fit your own data then you could\n;; just paste a vector of pairs into the definition of target-data instead.\n\n\n;; Remove unneeded key-value pairs from data\n(map #(dissoc % :PlayerName :TwoPutts :ThreePutts :Index :Season :AvgOfficialWGR)\n     golf-data)\n\n; extracts values from golf data and then converts into a vector of vectors\n(defn myfunction [golf-data]\n  (map #(into [] %) (map #(vals %) golf-data)))\n\n;; Remove unneeded key-value pairs from data\n(myfunction (map #(dissoc % :PlayerName :TwoPutts :ThreePutts :Index :Season :AvgOfficialWGR)\n                 golf-data))\n\n; small function that swaps two elements in a vector\n(defn swap [v i1 i2]\n  (assoc v i2 (v i1) i1 (v i2)))\n\n; generalizes swap function to map\n(defn swap-elements [v i1 i2]\n  (map #(swap % i1 i2) v))\n\n; final form of regression-data ready for analysis\n; swapping officialmoney and oneputts\n(def regression-data\n  (swap-elements (myfunction (map #(dissoc % :PlayerName :TwoPutts :ThreePutts :Index :Season :AvgOfficialWGR)\n                                  golf-data)) 5 9))\n\n(def target-data regression-data)\n\n;; An individual will be an expression made of functions +, -, *, and\n;; pd (protected division), along with terminals x and randomly chosen\n;; constants between -5.0 and 5.0. Note that for this problem the\n;; presence of the constants actually makes it much harder, but that\n;; may not be the case for other problems.\n\n;; We'll the functions and the arities in a map.\n\n(def function-table (zipmap '(+ - * pd)\n                            '(2 2 2 2 )))\n\n(defn random-function\n  []\n  (rand-nth (keys function-table)))\n\n(defn random-terminal\n  []\n  (rand-nth (list 'x1 'x2 'x3 'x4 'x5 'x6 'x7 'x8 (- (rand 1000) 500))))\n\n(defn random-code\n  [depth]\n  (if (or (zero? depth)\n          (zero? (rand-int 2))) ; might want to try (rand-int (count function-table))\n    (random-terminal)\n    (let [f (random-function)]\n      (cons f (repeatedly (get function-table f)\n                          #(random-code (dec depth)))))))\n\n;; And we have to define pd (protected division):\n\n(defn pd\n  \&quot;Protected division; returns 0 if the denominator is zero.\&quot;\n  [num denom]\n  (if (zero? denom)\n    0\n    (/ num denom)))\n\n;; We can now evaluate the error of an individual by creating a function\n;; built around the individual, calling it on all of the x values, and\n;; adding up all of the differences between the results and the\n;; corresponding y values.\n\n(defn error\n  [individual]\n  (let [value-function (eval (list 'fn '[x1 x2 x3 x4 x5 x6 x7 x8] individual))]\n    (reduce + (map (fn [[x1 x2 x3 x4 x5 x6 x7 x8 y]]\n                     (Math/abs\n                       (- (float (value-function x1 x2 x3 x4 x5 x6 x7 x8)) y)))\n                   target-data))))\n\n;; We can now generate and evaluate random small programs, as with:\n\n;; (let [i (random-code 6)] (println i) (println (error i) \&quot;from individual\&quot; i))\n\n;; To help write mutation and crossover functions we'll write a utility\n;; function that returns a random subtree from an expression and another that\n;; replaces a random subtree of an expression.\n\n(defn codesize [c]\n  (if (seq? c)\n    (count (flatten c))\n    1))\n\n(defn random-subtree\n  [i]\n  (if (zero? (rand-int (codesize i)))\n    i\n    (random-subtree\n      (rand-nth\n        (apply concat\n               (map #(repeat (codesize %) %)\n                    (rest i)))))))\n\n;(random-subtree '(+ (* x (+ y z)) w))\n\n(defn replace-random-subtree\n  [i replacement]\n  (if (zero? (rand-int (codesize i)))\n    replacement\n    (let [position-to-change\n          (rand-nth\n            (apply concat\n                   (map #(repeat (codesize %1) %2)\n                        (rest i)\n                        (iterate inc 1))))]\n      (map #(if %1 (replace-random-subtree %2 replacement) %2)\n           (for [n (iterate inc 0)] (= n position-to-change))\n           i))))\n\n;(replace-random-subtree '(0 (1) (2 2) (3 3 3) (4 4 4 4) (5 5 5 5 5) (6 6 6 6 6 6 6)) 'x)\n\n;(replace-random-subtree '(+ (* x (+ y z)) w) 3)\n\n(defn mutate\n  [i]\n  (replace-random-subtree i (random-code 2)))\n\n;(mutate '(+ (* x (+ y z)) w))\n\n(defn crossover\n  [i j]\n  (replace-random-subtree i (random-subtree j)))\n\n;(crossover '(+ (* x (+ y z)) w) '(/ a (/ (/ b c) d)))\n\n; We can see some mutations with:\n; (let [i (random-code 2)] (println (mutate i) \&quot;from individual\&quot; i))\n\n; and crossovers with:\n; (let [i (random-code 2) j (random-code 2)]\n;   (println (crossover i j) \&quot;from\&quot; i \&quot;and\&quot; j))\n\n;(let [e '(* x 2)\n;      m (mutate e)]\n; (println (error e) e)\n; (println (error m) m))\n;\n;(let [e1 '(* x 2)\n;      e2 '(+ (* x 3) 4)\n;      c (crossover e1 e2)]\n; (println (error e1) e1)\n; (println (error e2) e2)\n; (println (error c) c))\n\n;; We'll also want a way to sort a population by error that doesn't require\n;; lots of error re-computation:\n\n(defn sort-by-error\n  [population]\n  (vec (map second\n            (sort (fn [[err1 ind1] [err2 ind2]] (&lt; err1 err2))\n                  (map #(vector (error %) %) population)))))\n\n;; Finally, we'll define a function to select an individual from a sorted\n;; population using tournaments of a given size.\n(comment \&quot;\n(defn select\n  [population tournament-size]\n  (let [size (count population)]\n    (nth population\n         (apply min (repeatedly tournament-size #(rand-int size))))))\n         \&quot;)\n\n\n;; Finally, we'll define a function to select and individual from a\n;; sorted population using LEXICASE SELECTION\n(defn lexicase-selection\n  \&quot;Selects an individual from the population using lexicase selection.\&quot;\n  [pop]\n  (loop [survivors pop\n         cases (shuffle (range (count (:errors (first pop)))))]\n    (if (or (empty? cases)\n            (empty? (rest survivors)))\n      (rand-nth survivors)\n      (let [min-err-for-case (apply min (map #(nth % (first cases))\n                                             (map :errors survivors)))]\n        (recur (filter #(= (nth (:errors %) (first cases)) min-err-for-case)\n                       survivors)\n               (rest cases))))))\n\n\n\n;; Now we can evolve a solution by starting with a random population and\n;; repeatedly sorting, checking for a solution, and producing a new\n;; population.\n\n(defn evolve\n  [popsize]\n  (println \&quot;Starting evolution...\&quot;)\n  (println \&quot;Testing, testing!\&quot;)\n  (loop [generation 0\n         population (sort-by-error (repeatedly popsize #(random-code 3)))]\n    (println population)\n    (let [best (first population)\n          best-error (error best)]\n      (println \&quot;======================\&quot;)\n      (println \&quot;Generation:\&quot; generation)\n      (println \&quot;Best program:\&quot; best)\n      (println \&quot;Best error:\&quot; best-error)\n\n      (println \&quot;     Median error:\&quot; (error (nth population\n                                                (int (/ popsize 2)))))\n      (println \&quot;     Average program size:\&quot;\n               (float (/ (reduce + (map count (map flatten population)))\n                         (count population))))\n      (if (&lt; best-error 0.1) ;; good enough to count as success\n        (println \&quot;Success:\&quot; best)\n        (recur\n          (inc generation)\n          (sort-by-error\n            (concat\n              (repeatedly (* 1/2 popsize) #(mutate (lexicase-selection population)))\n              (repeatedly (* 1/4 popsize) #(crossover (lexicase-selection population)\n                                                      (lexicase-selection population)))\n              (repeatedly (* 1/4 popsize) #(lexicase-selection population)))))))))\n\n\n;; Run it with a population of 1000:\n\n(evolve 1000)&quot;, :offset 9717, :ns &quot;ftw.core&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.Tester">
    <configuration name="Tester" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="ftw" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <module name="ftw" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.Tester" />
      <item itemvalue="Clojure REPL.Unnamed" />
    </list>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="9199e5d7-8179-4205-b0ae-236aab6c029c" name="Default Changelist" comment="" />
      <created>1585252351042</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1585252351042</updated>
    </task>
    <task id="LOCAL-00001" summary="adding lein project">
      <created>1585252430825</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1585252430825</updated>
    </task>
    <task id="LOCAL-00002" summary="adding lein project">
      <created>1585252823690</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1585252823690</updated>
    </task>
    <option name="localTasksCounter" value="3" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="adding lein project" />
    <MESSAGE value="made modifications to files" />
    <option name="LAST_COMMIT_MESSAGE" value="made modifications to files" />
  </component>
  <component name="WindowStateProjectService">
    <state x="284" y="141" width="1110" height="686" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1587761202370">
      <screen x="0" y="23" width="1440" height="804" />
    </state>
    <state x="284" y="141" width="1110" height="686" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.23.1440.804@0.23.1440.804" timestamp="1587761202370" />
    <state x="378" y="232" key="#com.intellij.execution.impl.EditConfigurationsDialog/1920.123.1440.877/0.23.1920.990@0.23.1920.990" timestamp="1585854602447" />
    <state x="823" y="418" key="#com.intellij.ide.util.projectWizard.JdkChooserPanel.MyDialog" timestamp="1585681959619">
      <screen x="0" y="23" width="1920" height="990" />
    </state>
    <state x="823" y="418" key="#com.intellij.ide.util.projectWizard.JdkChooserPanel.MyDialog/1920.123.1440.877/0.23.1920.990@0.23.1920.990" timestamp="1585681959619" />
    <state x="344" y="42" key="CommitChangelistDialog2" timestamp="1586198546673">
      <screen x="0" y="23" width="1440" height="814" />
    </state>
    <state x="344" y="52" key="CommitChangelistDialog2/0.0.1440.900@0.0.1440.900" timestamp="1585252823571" />
    <state x="344" y="42" key="CommitChangelistDialog2/0.23.1440.814@0.23.1440.814" timestamp="1586198546673" />
    <state x="459" y="84" key="CommitChangelistDialog2/1920.123.1440.821/0.23.1920.1057@0.23.1920.1057" timestamp="1586121445795" />
    <state x="211" y="23" key="SettingsEditor" timestamp="1587238975382">
      <screen x="0" y="23" width="1440" height="804" />
    </state>
    <state x="211" y="23" key="SettingsEditor/0.23.1440.804@0.23.1440.804" timestamp="1587238975382" />
    <state x="320" y="190" key="Vcs.Push.Dialog.v2" timestamp="1585252826956">
      <screen x="0" y="0" width="1440" height="900" />
    </state>
    <state x="320" y="190" key="Vcs.Push.Dialog.v2/0.0.1440.900@0.0.1440.900" timestamp="1585252826956" />
    <state x="0" y="23" key="com.intellij.ide.util.TipDialog" timestamp="1587760937751">
      <screen x="0" y="23" width="1440" height="804" />
    </state>
    <state x="0" y="23" key="com.intellij.ide.util.TipDialog/0.23.1440.804@0.23.1440.804" timestamp="1587760937751" />
    <state x="664" y="377" key="com.intellij.ide.util.TipDialog/1920.123.1440.814/0.23.1920.1057@0.23.1920.1057" timestamp="1586119191896" />
    <state x="0" y="23" key="com.intellij.ide.util.TipDialog/1920.123.1440.877/0.23.1920.983@0.23.1920.983" timestamp="1587495406189" />
    <state x="664" y="355" key="com.intellij.ide.util.TipDialog/1920.123.1440.877/0.23.1920.990@0.23.1920.990" timestamp="1585853095315" />
    <state x="671" y="431" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1587495955481">
      <screen x="0" y="23" width="1920" height="983" />
    </state>
    <state x="503" y="374" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1440.900@0.0.1440.900" timestamp="1585252475346" />
    <state x="671" y="431" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/1920.123.1440.877/0.23.1920.983@0.23.1920.983" timestamp="1587495955481" />
    <state x="306" y="161" key="search.everywhere.popup" timestamp="1586195666148">
      <screen x="0" y="23" width="1440" height="814" />
    </state>
    <state x="306" y="161" key="search.everywhere.popup/0.23.1440.814@0.23.1440.814" timestamp="1586195666148" />
  </component>
</project>